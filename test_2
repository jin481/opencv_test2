/*#include <opencv2/opencv.hpp>
#include <iostream>
using namespace cv;
using namespace std;
Mat img(500, 500 + ((500 / 3.0) * 2), CV_8UC3, Scalar(255, 255, 255));
Point ptPrev(-1, -1);
Rect saverect(500, 0, (500 / 3.0), 100);
Rect loadrect(500, 100, (500 / 3.0), 100);
Rect clearrect(500, 200, (500 / 3.0), 100);
Rect runrect(500, 300, (500 / 3.0), 100);
Rect exitrect(500, 400, (500 / 3.0), 100);
Rect contourrect(500 + (500 / 3.0), 0, (500 / 3.0), 100);
Rect recognizerect(500 + (500 / 3.0), 100, (500 / 3.0), 100);
Rect centerrect(500 + (500 / 3.0), 200, (500 / 3.0), 100);
Rect digitrect(500 + (500 / 3.0), 300, (500 / 3.0), 100);
void onMouse(int event, int x, int y, int flags, void*);
void Save();
void Load();
void Clear();
void Run();
void Exit();
void contour();
void recognizeDigits();
void findCenters();
void recognizeSingleDigit() {
	Mat gray, binary;
	cvtColor(img(Rect(1, 1, 490, 490)), gray, COLOR_BGR2GRAY);
	threshold(gray, binary, 150, 255, THRESH_BINARY_INV);
	vector<vector<Point>> contours;
	findContours(binary, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);
	for (size_t i = 0; i < contours.size(); ++i) {
		Rect boundRect = boundingRect(contours[i]);
		float aspectRatio = static_cast<float>(boundRect.width) / boundRect.height;

		if (aspectRatio >= 0.1 && aspectRatio <= 0.4 && boundRect.height > 10 && boundRect.height > boundRect.width) {
			cout << "인식 결과: 1" << endl;
			return;
		}
		if (aspectRatio >= 0.3 && aspectRatio <= 0.8 && boundRect.height > 10 && boundRect.height > boundRect.width) {
			cout << "인식 결과: 1" << endl;
			return;
		}
	}
	cout << "인식된 숫자가 없습니다." << endl;
}
int main() {
	line(img, Point(500, 0), Point(500, 500), Scalar(0), 2);
	line(img, Point(500 + (500 / 3.0), 0), Point(500 + (500 / 3.0), 500), Scalar(0), 2);
	line(img, Point(500, 100), Point(500 + ((500 / 3.0) * 2), 100), Scalar(0), 2);
	line(img, Point(500, 200), Point(500 + ((500 / 3.0) * 2), 200), Scalar(0), 2);
	line(img, Point(500, 300), Point(500 + ((500 / 3.0) * 2), 300), Scalar(0), 2);
	line(img, Point(500, 400), Point(500 + ((500 / 3.0) * 2), 400), Scalar(0), 2);

	putText(img, "Save", Point(530, 60), FONT_HERSHEY_SIMPLEX, 1.5, Scalar(0), 3);
	putText(img, "Load", Point(530, 160), FONT_HERSHEY_SIMPLEX, 1.5, Scalar(0), 3);
	putText(img, "Clear", Point(530, 260), FONT_HERSHEY_SIMPLEX, 1.5, Scalar(0), 3);
	putText(img, "Run", Point(530, 360), FONT_HERSHEY_SIMPLEX, 1.5, Scalar(0), 3);
	putText(img, "Exit", Point(530, 460), FONT_HERSHEY_SIMPLEX, 1.5, Scalar(0), 3);
	putText(img, "contour", Point(680, 60), FONT_HERSHEY_SIMPLEX, 1.2, Scalar(0), 3);
	putText(img, "recong", Point(680, 160), FONT_HERSHEY_SIMPLEX, 1.2, Scalar(0), 3);
	putText(img, "center", Point(680, 260), FONT_HERSHEY_SIMPLEX, 1.2, Scalar(0), 3);
	putText(img, "digit", Point(680, 360), FONT_HERSHEY_SIMPLEX, 1.2, Scalar(0), 3);

	namedWindow("img");
	setMouseCallback("img", onMouse);
	imshow("img", img);
	waitKey(0);
	return 0;
}
void onMouse(int event, int x, int y, int flags, void*) {
	if (event == EVENT_LBUTTONDOWN) {
		if (x < 500) {
			ptPrev = Point(x, y);
		}
		else {
			Point clickPoint(x, y);
			if (saverect.contains(clickPoint))
				Save();
			else if (loadrect.contains(clickPoint))
				Load();
			else if (clearrect.contains(clickPoint))
				Clear();
			else if (runrect.contains(clickPoint))
				Run();
			else if (exitrect.contains(clickPoint))
				Exit();
			else if (contourrect.contains(clickPoint))
				contour();
			else if (recognizerect.contains(clickPoint))
				recognizeDigits();
			else if (centerrect.contains(clickPoint))
				findCenters();
			else if (digitrect.contains(clickPoint))
				recognizeSingleDigit();
		}
	}
	else if (event == EVENT_LBUTTONUP)
		ptPrev = Point(-1, -1);
	else if (event == EVENT_MOUSEMOVE && (flags & EVENT_FLAG_LBUTTON)) {
		if (x < 500 && x >= 0 && y < 500 && y >= 0) {
			line(img, ptPrev, Point(x, y), Scalar::all(0), LINE_AA);
			ptPrev = Point(x, y);
			imshow("img", img);
		}
	}
}
void Save() {
	string fileName;
	cout << "파일명 입력: ";
	cin >> fileName;
	imwrite(fileName, img(Rect(0, 0, 500, 500)));
	cout << fileName + " 파일이 저장됨" << endl;
}
void Load() {
	string fileName;
	cout << "불러올 파일명 입력: ";
	cin >> fileName;
	Mat src = imread(fileName);
	if (!src.empty()) {
		src.copyTo(img(Rect(0, 0, 500, 500)));
		imshow("img", img);
		cout << fileName + " 파일을 불러옴" << endl;
	}
	else
		cout << "파일을 불러올 수 없습니다." << endl;
}
void Clear() {
	img(Rect(0, 0, 520, 500)) = Scalar(255, 255, 255);
	line(img, Point(500, 0), Point(500, 500), Scalar(0), 2);
	line(img, Point(500, 100), Point(500 + (500 / 3.0), 100), Scalar(0), 2);
	line(img, Point(500, 200), Point(500 + (500 / 3.0), 200), Scalar(0), 2);
	line(img, Point(500, 300), Point(500 + (500 / 3.0), 300), Scalar(0), 2);
	line(img, Point(500, 400), Point(500 + (500 / 3.0), 400), Scalar(0), 2);
	imshow("img", img);
	cout << "입력창 삭제됨" << endl;
}
void Run() {
	Mat gray, binary;
	cvtColor(img(Rect(1, 1, 490, 490)), gray, COLOR_BGR2GRAY);
	threshold(gray, binary, 100, 255, THRESH_BINARY_INV);
	vector<vector<Point>> contours;
	findContours(binary, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);

	Mat drawing = Mat::zeros(binary.size(), CV_8UC3);
	int boundingBoxCount = 0; // 바운딩 박스 개수를 세기 위한 변수
	vector<Rect> boundingBoxes;

	for (size_t i = 0; i < contours.size(); i++) {
		Rect boundRect = boundingRect(contours[i]);
		rectangle(drawing, boundRect.tl(), boundRect.br(), Scalar(255, 255, 255), 2); // 바운딩 박스를 그립니다.
		boundingBoxes.push_back(boundRect);
		boundingBoxCount++;
	}
	vector<Point2f> centers;
	for (size_t i = 0; i < contours.size(); i++) {
		Rect boundRect = boundingRect(contours[i]);
		Point2f center((boundRect.tl().x + boundRect.br().x) / 2.0, (boundRect.tl().y + boundRect.br().y) / 2.0);
		centers.push_back(center);
	}
	Rect firstBox = boundingBoxes[0];
	Rect secondBox = boundingBoxes[1];
	int centerY1 = (firstBox.tl().y + firstBox.br().y) / 2;
	int centerY2 = (secondBox.tl().y + secondBox.br().y) / 2;
	if (boundingBoxCount == 3)
		cout << "인식 결과: 8" << endl;
	else if (boundingBoxCount == 2) {
		if (centerY1 > centerY2)
			cout << "인식 결과: 6" << endl;
		else if (centerY1 < centerY2)
			cout << "인식 결과: 9" << endl;
		else if (abs(centerY1 - centerY2) < 30)
			cout << "인식 결과: 0" << endl;
	}
	for (int i = 0; i < boundingBoxes.size(); ++i) {
		Rect box = boundingBoxes[i];
		cout << "바운딩 박스 " << i + 1 << ": (x=" << box.x << ", y=" << box.y << "), width=" << box.width << ", height=" << box.height << endl;
	}
	cout << endl;
	cout << centerY1 << " " << centerY2 << endl;
}

void Exit() {
	cout << "프로그램 종료" << endl;
	destroyAllWindows();
	exit(0);
}
void contour() {
	Mat gray, binary;
	cvtColor(img(Rect(1, 1, 490, 490)), gray, COLOR_BGR2GRAY);
	threshold(gray, binary, 100, 255, THRESH_BINARY_INV);
	vector<vector<Point>> contours;
	findContours(binary, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);
	int contourCount = contours.size();
	cout << "외곽선의 개수: " << contourCount << "개" << endl;
}
void recognizeDigits() {
	Mat gray, binary;
	cvtColor(img(Rect(1, 1, 490, 490)), gray, COLOR_BGR2GRAY);
	threshold(gray, binary, 100, 255, THRESH_BINARY_INV);
	vector<vector<Point>> contours;
	findContours(binary, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);

	Mat drawing = Mat::zeros(binary.size(), CV_8UC3);
	for (size_t i = 0; i < contours.size(); i++) {
		Rect boundRect = boundingRect(contours[i]);
		rectangle(binary, boundRect.tl(), boundRect.br(), Scalar(255), 2); // 바운딩 박스를 이진화된 이미지에 그립니다.
	}

	imshow("img", binary);
}

void findCenters() {
	Mat gray, binary;
	cvtColor(img(Rect(1, 1, 490, 490)), gray, COLOR_BGR2GRAY);
	threshold(gray, binary, 100, 255, THRESH_BINARY_INV);
	vector<vector<Point>> contours;
	findContours(binary, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);

	Mat drawing = Mat::zeros(binary.size(), CV_8UC3);
	vector<Point2f> centers;
	for (size_t i = 0; i < contours.size(); i++) {
		Rect boundRect = boundingRect(contours[i]);
		rectangle(drawing, boundRect.tl(), boundRect.br(), Scalar(255, 255, 255), 2); // 바운딩 박스를 그립니다.

		Point2f center((boundRect.tl().x + boundRect.br().x) / 2.0, (boundRect.tl().y + boundRect.br().y) / 2.0);
		centers.push_back(center);

		// 십자선을 그립니다.
		line(drawing, Point(center.x, boundRect.tl().y), Point(center.x, boundRect.br().y), Scalar(0, 0, 255), 1);
		line(drawing, Point(boundRect.tl().x, center.y), Point(boundRect.br().x, center.y), Scalar(0, 0, 255), 1);
	}

	imshow("img", drawing);
	cout << "각 숫자 영역의 중심 좌표:" << endl;
	for (const auto& center : centers) {
		cout << "(" << center.x << ", " << center.y << ")" << endl;
	}
}*/
