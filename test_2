/*#include <opencv2/opencv.hpp>
#include <iostream>
using namespace cv;
using namespace std;
Mat img(500, 500 + ((500 / 3.0) * 2), CV_8UC3, Scalar(255, 255, 255));
Point ptPrev(-1, -1);
Rect saverect(500, 0, (500 / 3.0), 100);
Rect loadrect(500, 100, (500 / 3.0), 100);
Rect clearrect(500, 200, (500 / 3.0), 100);
Rect runrect(500, 300, (500 / 3.0), 100);
Rect exitrect(500, 400, (500 / 3.0), 100);
Rect contourrect(500 + (500 / 3.0), 0, (500 / 3.0), 100);
void onMouse(int event, int x, int y, int flags, void*);
void Save();
void Load();
void Clear();
void Run();
void Exit();
void contour();
int predictDigit(const Mat& image);
int main() {
	line(img, Point(500, 0), Point(500, 500), Scalar(0), 2);
	line(img, Point(500 + (500 / 3.0), 0), Point(500 + (500 / 3.0), 500), Scalar(0), 2);
	line(img, Point(500, 100), Point(500 + ((500 / 3.0) * 2), 100), Scalar(0), 2);
	line(img, Point(500, 200), Point(500 + ((500 / 3.0) * 2), 200), Scalar(0), 2);
	line(img, Point(500, 300), Point(500 + ((500 / 3.0) * 2), 300), Scalar(0), 2);
	line(img, Point(500, 400), Point(500 + ((500 / 3.0) * 2), 400), Scalar(0), 2);

	putText(img, "Save", Point(530, 60), FONT_HERSHEY_SIMPLEX, 1.5, Scalar(0), 3);
	putText(img, "Load", Point(530, 160), FONT_HERSHEY_SIMPLEX, 1.5, Scalar(0), 3);
	putText(img, "Clear", Point(530, 260), FONT_HERSHEY_SIMPLEX, 1.5, Scalar(0), 3);
	putText(img, "Run", Point(530, 360), FONT_HERSHEY_SIMPLEX, 1.5, Scalar(0), 3);
	putText(img, "Exit", Point(530, 460), FONT_HERSHEY_SIMPLEX, 1.5, Scalar(0), 3);
	putText(img, "contour", Point(680, 60), FONT_HERSHEY_SIMPLEX, 1.2, Scalar(0), 3);

	namedWindow("img");
	setMouseCallback("img", onMouse);
	imshow("img", img);
	waitKey(0);
	return 0;
}
void onMouse(int event, int x, int y, int flags, void*) {
	if (event == EVENT_LBUTTONDOWN) {
		if (x < 500) {
			ptPrev = Point(x, y);
		}
		else {
			Point clickPoint(x, y);
			if (saverect.contains(clickPoint))
				Save();
			else if (loadrect.contains(clickPoint))
				Load();
			else if (clearrect.contains(clickPoint))
				Clear();
			else if (runrect.contains(clickPoint))
				Run();
			else if (exitrect.contains(clickPoint))
				Exit();
			else if (contourrect.contains(clickPoint))
				contour();
		}
	}
	else if (event == EVENT_LBUTTONUP)
		ptPrev = Point(-1, -1);
	else if (event == EVENT_MOUSEMOVE && (flags & EVENT_FLAG_LBUTTON)) {
		if (x < 500 && x >= 0 && y < 500 && y >= 0) {
			line(img, ptPrev, Point(x, y), Scalar::all(0), LINE_AA);
			ptPrev = Point(x, y);
			imshow("img", img);
		}
	}
}
void Save() {
	string fileName;
	cout << "파일명 입력: ";
	cin >> fileName;
	imwrite(fileName, img(Rect(0, 0, 490, 490)));
	cout << fileName + " 파일이 저장됨" << endl;
}
void Load() {
	string fileName;
	cout << "불러올 파일명 입력: ";
	cin >> fileName;
	Mat src = imread(fileName);
	if (!src.empty()) {
		src.copyTo(img(Rect(0, 0, 490, 490)));
		imshow("img", img);
		cout << fileName + " 파일을 불러옴" << endl;
	}
	else
		cout << "파일을 불러올 수 없습니다." << endl;
}
void Clear() {
	img(Rect(0, 0, 520, 500)) = Scalar(255, 255, 255);
	line(img, Point(500, 0), Point(500, 500), Scalar(0), 2);
	line(img, Point(500, 100), Point(500 + (500 / 3.0), 100), Scalar(0), 2);
	line(img, Point(500, 200), Point(500 + (500 / 3.0), 200), Scalar(0), 2);
	line(img, Point(500, 300), Point(500 + (500 / 3.0), 300), Scalar(0), 2);
	line(img, Point(500, 400), Point(500 + (500 / 3.0), 400), Scalar(0), 2);
	imshow("img", img);
	cout << "입력창 삭제됨" << endl;
}
void Run() {
	Mat gray, resized;
	cvtColor(img(Rect(1, 1, 490, 490)), gray, COLOR_BGR2GRAY);
	resize(gray, resized, Size(28, 28));
	int result = predictDigit(resized);
	cout << "인식결과: " << result << endl;
}
void Exit() {
	cout << "프로그램 종료" << endl;
	destroyAllWindows();
	exit(0);
}
void contour() {
	Mat gray, binary;
	cvtColor(img(Rect(1, 1, 490, 490)), gray, COLOR_BGR2GRAY);
	threshold(gray, binary, 100, 255, THRESH_BINARY_INV);
	vector<vector<Point>> contours;
	findContours(binary, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);
	int contourCount = contours.size();
	cout << "외곽선의 개수: " << contourCount << "개" << endl;
}
int predictDigit(const Mat& image) {
	return rand() % 10;
}*/
